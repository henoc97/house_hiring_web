<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Responsive Admin & Dashboard</title>
  <link rel="stylesheet" href="main.css">
  <!-- box icon -->
  <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
</head>
<body>
  <%- include('sidebar') %>
  <section class="home_section" id="content-section">
    <%- include('topbar') %>
    <%- include('cardboxes') %>
    <div class="details">
      <%- include('recentpayments') %>
      <%- include('newcustomers') %>
    </div>
  </section>

<script src="endpoints.js"></script>
<script src="renewAccessToken.js"></script>
<script src="cookies_engine.js"></script>
<script>
  document.getElementById('btn').addEventListener('click', function() {
    document.querySelector('.sidebar').classList.toggle('open');
  });

  // Sélectionner tous les liens de menu
  const menuLinks = document.querySelectorAll('.sidebar ul li a');

  menuLinks.forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();

      // Supprimer la classe active de tous les liens
      menuLinks.forEach(l => l.classList.remove('active'));

      // Ajouter la classe active au lien cliqué
      this.classList.add('active');

      // Cacher les éléments actuels et afficher le contenu correspondant
      document.querySelector('.details').innerHTML = ''; // Nettoyer la section details

      if (this.id === 'dash-button') {
        fetch('/dashboard')
          .then(response => response.text())
          .then(data => {
            document.querySelector('.details').innerHTML = data;
          });
      } 

      if (this.id === 'proprietes-button') {
        fetch('/propertiespart')
          .then(response => response.text())
          .then(data => {
            document.querySelector('.details').innerHTML = data;

            const propertyForm = document.getElementById('property-form');
            const propertiesTable = document.getElementById('myPropertiesTable');
            if (propertyForm && propertiesTable) {
              propertyForm.addEventListener('submit', function(event) {
                event.preventDefault(); 
                createPropertyRequest();
              });

              getPropertiesRequest();
            }
          });
      } 

      if (this.id === 'tenant-button') {
        fetch('/tenants_part')
          .then(response => response.text())
          .then(data => {
            document.querySelector('.details').innerHTML = data;
          });
      }

      if (this.id === 'tenant_home-button') {
        fetch('/tenant_home')
          .then(response => response.text())
          .then(data => {
            document.querySelector('.details').innerHTML = data;
          });
      }

      if (this.id === 'myreciept-button') {
        fetch('/myreciept')
        .then(response => response.text())
        .then(data => {
          document.querySelector('.details').innerHTML = data;
        });
      }
    });
  });
</script>

<script>
  function createPropertyRequest(){
    let address = document.getElementById('address').value;
    let description = document.getElementById('description').value;
    let cost = document.getElementById('cost').value;

    let token = localStorage.getItem('accessToken');

    fetch(host + 'createProperties', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + token,
        'Content-Type': 'application/json'
      },
      body : JSON.stringify({
        "address": address,
        "description": description,
        "cost": cost
      })
    })
    .then(response => {
        if (!response.ok && (response.status === 401 || response.status === 403)) {
            alert("problem")
            return renewAccessToken().then(() => createPropertyRequest());
        }
        return response.json();
    })
    .then(data => {
        console.log(data);
        document.getElementById('property-form').reset();
        getPropertiesRequest();
    })
    .catch(error => {
        console.error('Erreur:', error);
        window.location.href = "/sign_log";
    });
  }
</script>


<script>
  function getPropertiesRequest() {
    let token = localStorage.getItem('accessToken');
    fetch(host + 'myProperties', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + token,
        'Content-Type': 'application/json'
      },
    })
    .then(response => response.json())
    .then(data => {
      console.log("data received:", data); // Log les données reçues

      // Si les propriétés sont enveloppées dans un objet { myProperties }
      const properties = data.myProperties || data;

      const tableBody = document.getElementById("myPropertiesTable");
      if (tableBody) {
        tableBody.innerHTML = ''; // Clear existing rows

        properties.forEach((property) => {
          console.log("Property data:", property); // Log chaque propriété
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${property.address}</td>
            <td>${property.description}</td>
            <td>${property.price}</td>
          `;
          tableBody.appendChild(row);
        });
      } else {
        console.error("Element with ID 'myPropertiesTable' not found.");
      }
    })
    .catch((error) => console.error('Error fetching properties:', error));
  }
</script>



</body>
</html>
